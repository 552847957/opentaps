/*
 * Copyright (c) 2009 Open Source Strategies, Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the Honest Public License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * Honest Public License for more details.
 *
 * You should have received a copy of the Honest Public License
 * along with this program; if not, write to Funambol,
 * 643 Bair Island Road, Suite 305 - Redwood City, CA 94063, USA
 *  
 */
 
 import org.ofbiz.base.util.UtilMisc;
 import org.ofbiz.base.util.UtilValidate;
 import org.ofbiz.entity.util.EntityUtil;
 import org.ofbiz.service.ServiceUtil;
 import org.opentaps.common.util.UtilMessage;
 import org.opentaps.common.util.UtilCommon;
 import org.opentaps.common.util.UtilAccountingTags;

 // check that a report was asked first
 reportFormType = context.get("reportFormType");
 if (UtilValidate.isEmpty(reportFormType)) return;

 // put to history
 context{"history"} = UtilCommon.makeHistoryEntry(UtilMessage.getUiLabels(locale).get("AccountingTrialBalance"));

//get the asOfDate from parseReportOptions
 asOfDate = context.get("asOfDate");

 // return if no asOfDate set
 if (asOfDate == null) return;

 // The reportFormType parameter indicates that the form has been submitted - 
 //  don't run the report unless that's the case
 reportFormType = parameters.get("reportFormType");
 if (reportFormType == null) return;

 organizationPartyId = context.get("organizationPartyId");
 
 input = UtilMisc.toMap("organizationPartyId", organizationPartyId, "glFiscalTypeId", context.get("glFiscalTypeId"), "asOfDate", asOfDate, "userLogin", userLogin);
 UtilAccountingTags.addTagParameters(request, input);
 result = dispatcher.runSync("getTrialBalanceForDate", input);

 // put results into the context
 if (!ServiceUtil.isError(result)) {
     context.put("assetAccounts", EntityUtil.orderBy(result.get("assetAccountBalances").keySet(), UtilMisc.toList("glAccountId")));
     context.put("assetAccountBalances", result.get("assetAccountBalances"));
     context.put("liabilityAccounts", EntityUtil.orderBy(result.get("liabilityAccountBalances").keySet(), UtilMisc.toList("glAccountId")));
     context.put("liabilityAccountBalances", result.get("liabilityAccountBalances"));
     context.put("equityAccounts", EntityUtil.orderBy(result.get("equityAccountBalances").keySet(), UtilMisc.toList("glAccountId")));
     context.put("equityAccountBalances", result.get("equityAccountBalances"));
     context.put("revenueAccounts", EntityUtil.orderBy(result.get("revenueAccountBalances").keySet(), UtilMisc.toList("glAccountId")));
     context.put("revenueAccountBalances", result.get("revenueAccountBalances"));
     context.put("expenseAccounts", EntityUtil.orderBy(result.get("expenseAccountBalances").keySet(), UtilMisc.toList("glAccountId")));
     context.put("expenseAccountBalances", result.get("expenseAccountBalances"));
     context.put("incomeAccounts", EntityUtil.orderBy(result.get("incomeAccountBalances").keySet(), UtilMisc.toList("glAccountId")));
     context.put("incomeAccountBalances", result.get("incomeAccountBalances"));
     context.put("otherAccounts", EntityUtil.orderBy(result.get("otherAccountBalances").keySet(), UtilMisc.toList("glAccountId")));
     context.put("otherAccountBalances", result.get("otherAccountBalances"));

     context.put("totalDebits", result.get("totalDebits"));
     context.put("totalCredits", result.get("totalCredits"));
 }

 // Get the base currency for the organization
 context.put("orgCurrencyUomId", UtilCommon.getOrgBaseCurrency(organizationPartyId, delegator));
