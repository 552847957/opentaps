/*
 * Copyright (c) 2006 - 2007 Open Source Strategies, Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the Honest Public License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * Honest Public License for more details.
 *
 * You should have received a copy of the Honest Public License
 * along with this program; if not, write to Funambol,
 * 643 Bair Island Road, Suite 305 - Redwood City, CA 94063, USA
 *  
 */

import org.ofbiz.base.util.*;
import org.ofbiz.entity.util.EntityUtil;
import org.ofbiz.entity.condition.*;

delegator = request.getAttribute("delegator");
customerPartyId = parameters.get("customerPartyId");
billingAccountId = parameters.get("billingAccountId");

// otherwise it's void and can be put into context
billingAccounts = null;
if (!UtilValidate.isEmpty(billingAccountId)) {
    billingAccounts = delegator.findByAnd("BillingAccount", UtilMisc.toList(new EntityExpr("billingAccountId", EntityOperator.LIKE, billingAccountId + "%")));
} else if (!UtilValidate.isEmpty(customerPartyId)) {
    // TODO: This is inefficient!  If there are many billing accounts, it would be better to do a findBy EntityExpr with EntityUtil.getFilterByDateExpr
    billingAccounts = delegator.findByAnd("BillingAccountAndRole", UtilMisc.toMap("partyId", customerPartyId, "roleTypeId", "BILL_TO_CUSTOMER"));
    billingAccounts = EntityUtil.filterByDate(billingAccounts);  // filter by fromDate and thruDate
    billingAccounts = EntityUtil.filterByDate(billingAccounts, UtilDateTime.nowTimestamp(), "accountFromDate", "accountThruDate", true);
} else if ("Y".equals(parameters.get("performFind"))) {
    billingAccounts = delegator.findByAnd("BillingAccount", UtilMisc.toList(EntityUtil.getFilterByDateExpr()));
}
context.put("billingAccounts", billingAccounts);
