/*
 * Copyright (c) 2006 - 2009 Open Source Strategies, Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the Honest Public License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * Honest Public License for more details.
 *
 * You should have received a copy of the Honest Public License
 * along with this program; if not, write to Funambol,
 * 643 Bair Island Road, Suite 305 - Redwood City, CA 94063, USA
 *  
 */

/*
 * This file should be called before every report that uses the
 * comparativeFlowReportOptions form file for
 * reporting. It takes care of parsing the input form data,
 * especially the dates, and setting up the context for correct
 * use by the form ftl files.
 *
 * After this script is called, call your report generation
 * script and get the form data from the context:
 *
 * glFiscalTypeId1
 * glFiscalTypeId2
 * fromDate1 (Timestamp or null if not specified)
 * thruDate1 (Timestamp or null if not specified)
 * fromDate2 (Timestamp or null if not specified)
 * thruDate2 (Timestamp or null if not specified)
 *
 * @author Chris Liberty (cliberty@opensourcestrategies.com)
 */

import java.util.*;
import java.sql.Timestamp;
import org.ofbiz.base.util.*;
import org.opentaps.common.util.UtilCommon;
import org.opentaps.common.util.UtilAccountingTags;
import org.opentaps.common.util.UtilDate;

timeZone = UtilHttp.getTimeZone(request);
locale = UtilHttp.getLocale(request);
dateFormat = UtilDate.getDateFormat(locale);

// get the form data
organizationPartyId = session.getAttribute("organizationPartyId");
customTimePeriods = delegator.findByAndCache("CustomTimePeriod", UtilMisc.toMap("organizationPartyId", organizationPartyId), UtilMisc.toList("customTimePeriodId"));
glFiscalTypes = delegator.findAll("GlFiscalType");

context.put("organizationPartyId", organizationPartyId);
context.put("customTimePeriods", customTimePeriods);
context.put("glFiscalTypes", glFiscalTypes);

// get the accounting tags
context.put("tagTypes", UtilAccountingTags.getAccountingTagFiltersForOrganization(organizationPartyId, UtilAccountingTags.FINANCIALS_REPORTS_TAG, delegator, locale));

dateOption = UtilCommon.getParameter(request, "reportDateOption");
if (dateOption == null) {
    return;
}

// get the report form type (flow, state, comparativeFlow, comparativeState)
reportFormType = UtilCommon.getParameter(request, "reportFormType");

// pass the fromGlFiscalTypeId and toGlFiscalTypeId to the next script
glFiscalTypeId1 = UtilCommon.getParameter(request, "glFiscalTypeId1");
glFiscalTypeId2 = UtilCommon.getParameter(request, "glFiscalTypeId2");
context.put("glFiscalTypeId1", glFiscalTypeId1);
context.put("glFiscalTypeId2", glFiscalTypeId2);

// determine the from and thru 1 and 2 dates according to the report form type
if (dateOption.equals("byDate")) {
    fromDate1 = UtilCommon.getParameter(request, "fromDate1");
    thruDate1 = UtilCommon.getParameter(request, "thruDate1");
    fromDate2 = UtilCommon.getParameter(request, "fromDate2");
    thruDate2 = UtilCommon.getParameter(request, "thruDate2");
    if (UtilValidate.isEmpty(fromDate1) || UtilValidate.isEmpty(thruDate1) || UtilValidate.isEmpty(fromDate2) || UtilValidate.isEmpty(thruDate2)) return;
    context.put("fromDate1", UtilDateTime.getDayStart(UtilDateTime.stringToTimeStamp(fromDate1, dateFormat, timeZone, locale), timeZone, locale));
    context.put("thruDate1", UtilDateTime.getDayEnd(UtilDateTime.stringToTimeStamp(thruDate1, dateFormat, timeZone, locale), timeZone, locale));
    context.put("fromDate2", UtilDateTime.getDayStart(UtilDateTime.stringToTimeStamp(fromDate2, dateFormat, timeZone, locale), timeZone, locale));
    context.put("thruDate2", UtilDateTime.getDayEnd(UtilDateTime.stringToTimeStamp(thruDate2, dateFormat, timeZone, locale), timeZone, locale));
} else if (dateOption.equals("byTimePeriod")) {
    context.put("fromCustomTimePeriodId", UtilCommon.getParameter(request, "fromCustomTimePeriodId"));
    context.put("thruCustomTimePeriodId", UtilCommon.getParameter(request, "thruCustomTimePeriodId"));
    fromTimePeriod = delegator.findByPrimaryKeyCache("CustomTimePeriod", UtilMisc.toMap("customTimePeriodId", context.get("fromCustomTimePeriodId")));
    thruTimePeriod = delegator.findByPrimaryKeyCache("CustomTimePeriod", UtilMisc.toMap("customTimePeriodId", context.get("thruCustomTimePeriodId")));
    fromDate1 = new Timestamp(fromTimePeriod.get("fromDate").getTime());
    thruDate1 = new Timestamp(fromTimePeriod.get("thruDate").getTime());
    fromDate2 = new Timestamp(thruTimePeriod.get("fromDate").getTime());
    thruDate2 = new Timestamp(thruTimePeriod.get("thruDate").getTime());
    context.put("fromDate1", UtilDateTime.getDayStart(fromDate1, timeZone, locale));
    context.put("thruDate1", UtilDateTime.adjustTimestamp(thruDate1, Calendar.MILLISECOND, -1, timeZone, locale));
    context.put("fromDate2", UtilDateTime.getDayStart(fromDate2, timeZone, locale));
    context.put("thruDate2", UtilDateTime.adjustTimestamp(thruDate2, Calendar.MILLISECOND, -1, timeZone, locale));
}
