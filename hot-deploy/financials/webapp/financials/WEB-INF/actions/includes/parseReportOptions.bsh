/*
 * Copyright (c) 2006 - 2008 Open Source Strategies, Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the Honest Public License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * Honest Public License for more details.
 *
 * You should have received a copy of the Honest Public License
 * along with this program; if not, write to Funambol,
 * 643 Bair Island Road, Suite 305 - Redwood City, CA 94063, USA
 *  
 */

/*
 * This file should be called before every report that uses the
 * flowReportOptions, stateReportOptions, etc. form files for
 * reporting. It takes care of parsing the input form data,
 * especially the dates, and setting up the context for correct
 * use by the form ftl files.
 *
 * After this script is called, call your report generation
 * script and get the form data from the context:
 *
 * glFiscalTypeId
 * fromDate (Timestamp or null if not specified)
 * thruDate (Timestamp or null if not specified)
 *
 * @author Leon Torres (leon@opensourcestrategies.com)
 * TODO: for comparative state, take the thru dates
 */

import java.util.*;
import java.sql.Timestamp;
import java.text.ParseException;
import org.ofbiz.base.util.*;
import org.opentaps.common.util.UtilMessage;
import org.opentaps.common.util.UtilCommon;
import org.opentaps.common.util.UtilAccountingTags;
import org.opentaps.common.util.UtilDate;
import com.opensourcestrategies.financials.reports.FinancialReports;

timeZone = UtilCommon.getTimeZone(request);
locale = UtilHttp.getLocale(request);
dateFormat = UtilDate.getDateFormat(locale);

// set a default asOfDate to end of today
defaultAsOfDate = UtilDateTime.getDayEnd( UtilDateTime.nowTimestamp(), timeZone, locale );
context.put("defaultAsOfDate", UtilDateTime.timeStampToString(defaultAsOfDate, dateFormat, timeZone, locale));

Map ctxt = FinancialReports.prepareFinancialReportParameters(request);
context.putAll(ctxt);

// get the form data
organizationPartyId = context.get("organizationPartyId");
customTimePeriods = delegator.findByAndCache("CustomTimePeriod", UtilMisc.toMap("organizationPartyId", organizationPartyId), UtilMisc.toList("customTimePeriodId"));
glFiscalTypes = delegator.findAll("GlFiscalType");

// get the accounting tags
context.put("tagTypes", UtilAccountingTags.getAccountingTagFiltersForOrganization(organizationPartyId, UtilAccountingTags.FINANCIALS_REPORTS_TAG, delegator, locale));
context.put("customTimePeriods", customTimePeriods);
context.put("glFiscalTypes", glFiscalTypes);

// check that the reportDateOption is defined (radio button for chosing time period or dates)
dateOption = UtilCommon.getParameter(request, "reportDateOption");
if (dateOption == null) {
    // use the default asOfDate and run the report
    context.put("asOfDate", defaultAsOfDate);
    return;
}

// get the report form type (flow, state, comparativeFlow, comparativeState)
reportFormType = UtilCommon.getParameter(request, "reportFormType");
context.put("reportFormType", reportFormType);

// pass the isPosted to the next script
isPosted = UtilCommon.getParameter(request, "isPosted");
context.put("isPosted", isPosted);
