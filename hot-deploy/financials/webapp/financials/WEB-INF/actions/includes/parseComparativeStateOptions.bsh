/*
 * Copyright (c) 2006 - 2009 Open Source Strategies, Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the Honest Public License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * Honest Public License for more details.
 *
 * You should have received a copy of the Honest Public License
 * along with this program; if not, write to Funambol,
 * 643 Bair Island Road, Suite 305 - Redwood City, CA 94063, USA
 *  
 */

/*
 * This file should be called before every report that uses the
 * comparativeStateReportOptions form file for
 * reporting. It takes care of parsing the input form data,
 * especially the dates, and setting up the context for correct
 * use by the form ftl files.
 *
 * After this script is called, call your report generation
 * script and get the form data from the context:
 *
 * fromGlFiscalTypeId
 * toGlFiscalTypeId
 * fromDate (Timestamp or null if not specified)
 * thruDate (Timestamp or null if not specified)
 *
 * @author Chris Liberty (cliberty@opensourcestrategies.com)
 */

import java.util.*;
import java.sql.Timestamp;
import org.ofbiz.base.util.*;
import org.opentaps.common.util.UtilAccountingTags;

locale = UtilHttp.getLocale(request);
timeZone = UtilHttp.getTimeZone(request);
dateFormat = UtilDateTime.getDateFormat(locale);

// get the form data
organizationPartyId = session.getAttribute("organizationPartyId");
customTimePeriods = delegator.findByAndCache("CustomTimePeriod", UtilMisc.toMap("organizationPartyId", organizationPartyId), UtilMisc.toList("customTimePeriodId"));
glFiscalTypes = delegator.findAll("GlFiscalType");

context.put("organizationPartyId", organizationPartyId);
context.put("customTimePeriods", customTimePeriods);
context.put("glFiscalTypes", glFiscalTypes);

// get the accounting tags
context.put("tagTypes", UtilAccountingTags.getAccountingTagFiltersForOrganization(organizationPartyId, UtilAccountingTags.FINANCIALS_REPORTS_TAG, delegator, locale));

dateOption = parameters.get("reportDateOption");
if (dateOption == null) {
    return;
}

// get the report form type (flow, state, comparativeFlow, comparativeState)
reportFormType = parameters.get("reportFormType");

// pass the fromGlFiscalTypeId and toGlFiscalTypeId to the next script
fromGlFiscalTypeId = parameters.get("fromGlFiscalTypeId");
toGlFiscalTypeId = parameters.get("toGlFiscalTypeId");
context.put("fromGlFiscalTypeId", fromGlFiscalTypeId);
context.put("toGlFiscalTypeId", toGlFiscalTypeId);

// determine the from and thru dates according to the report form type
if (dateOption.equals("byDate")) {
    fromDate = parameters.get("fromDate");
    thruDate = parameters.get("thruDate");
    if (fromDate == null || fromDate.length() == 0 || thruDate == null || thruDate.length() == 0) return; 
    context.put("fromDate", UtilDateTime.getDayStart(UtilDateTime.stringToTimeStamp(fromDate, dateFormat, timeZone, locale), timeZone, locale));
    context.put("thruDate", UtilDateTime.getDayEnd(UtilDateTime.stringToTimeStamp(thruDate, dateFormat, timeZone, locale), timeZone, locale));
} else if (dateOption.equals("byTimePeriod")) {
    context.put("fromCustomTimePeriodId", parameters.get("fromCustomTimePeriodId"));
    context.put("thruCustomTimePeriodId", parameters.get("thruCustomTimePeriodId"));
    fromTimePeriod = delegator.findByPrimaryKeyCache("CustomTimePeriod", UtilMisc.toMap("customTimePeriodId", context.get("fromCustomTimePeriodId")));
    thruTimePeriod = delegator.findByPrimaryKeyCache("CustomTimePeriod", UtilMisc.toMap("customTimePeriodId", context.get("thruCustomTimePeriodId")));
    //  the time periods end at the beginning of the thruDate,  end we want to adjust it so that the report ends at the end of day before the thruDate
    fromDate = UtilDateTime.adjustTimestamp(new Timestamp(fromTimePeriod.get("thruDate").getTime()), Calendar.MILLISECOND, -1, timeZone, locale);
    thruDate = UtilDateTime.adjustTimestamp(new Timestamp(thruTimePeriod.get("thruDate").getTime()), Calendar.MILLISECOND, -1, timeZone, locale);
    context.put("fromDate", fromDate);
    context.put("thruDate", thruDate);
}

