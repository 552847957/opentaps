/*
 * Copyright (c) 2006 - 2007 Open Source Strategies, Inc.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the Honest Public License.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * Honest Public License for more details.
 * 
 * You should have received a copy of the Honest Public License
 * along with this program; if not, write to Funambol,
 * 643 Bair Island Road, Suite 305 - Redwood City, CA 94063, USA
 */

import javolution.util.FastList;
import org.ofbiz.base.util.UtilMisc;
import org.ofbiz.base.util.UtilValidate;
import org.opentaps.common.util.UtilMessage;
import org.opentaps.domain.DomainsDirectory;
import org.opentaps.domain.DomainsLoader;
import org.opentaps.domain.order.Order;
import org.opentaps.domain.order.OrderDomainInterface;
import org.opentaps.domain.order.OrderRepositoryInterface;
import org.opentaps.foundation.exception.FoundationException;
import org.opentaps.foundation.infrastructure.Infrastructure;
import org.opentaps.foundation.infrastructure.User;

domainsLoader = new DomainsLoader(new Infrastructure(dispatcher), new User(userLogin));
orderDomain = domainsLoader.loadDomainsDirectory().getOrderDomain();
orderRepository = orderDomain.getOrderRepository();

// check if we are given an orderId
orderId = parameters.get("orderId");
if (UtilValidate.isEmpty(orderId)) return;

// retreive order
try {
    order = orderRepository.getOrderById(orderId);
} catch (FoundationException e) {
    UtilMessage.addFieldError(request, "orderId", "OpentapsError_OrderNotFound", UtilMisc.toMap("orderId", orderId));
    return;
}

// must be a Sales Order
if (!order.isSalesOrder()) {
    UtilMessage.addFieldError(request, "orderId", "OpentapsError_OrderNotSalesOrder", UtilMisc.toMap("orderId", orderId));
    return;
}

if (!order.isApproved()) {
    UtilMessage.addFieldError(request, "orderId", "OpentapsError_OrderNotApproved", UtilMisc.toMap("orderId", orderId));
    return;
}

context.put("orderId", orderId);
context.put("order", order);

// retreive the non physical order items which are currently in the approved state
orderItems = order.getNonPhysicalItemsForStatus("ITEM_APPROVED");

// set the orderItem.quantity field to what's actually available (ordered - invoiced)
for (iter = orderItems.iterator(); iter.hasNext(); ) {
    item = iter.next();
    available = item.getOrderedQuantity();
    available = available.subtract(item.getInvoicedQuantity());
    if (available.doubleValue() == 0.0) iter.remove();
    item.setQuantity(available);
}
context.put("orderItems", orderItems);
