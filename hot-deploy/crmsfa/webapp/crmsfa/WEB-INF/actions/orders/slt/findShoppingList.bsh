/*
 * Copyright (c) 2006 - 2008 Open Source Strategies, Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the Honest Public License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * Honest Public License for more details.
 *
 * You should have received a copy of the Honest Public License
 * along with this program; if not, write to Funambol,
 * 643 Bair Island Road, Suite 305 - Redwood City, CA 94063, USA
 */
 import org.ofbiz.base.util.UtilValidate;
 import org.ofbiz.entity.condition.EntityOperator;
 import org.ofbiz.entity.condition.EntityExpr;
 import org.opentaps.common.builder.*;
 import org.opentaps.common.pagination.*;
 import org.opentaps.common.util.UtilCommon;
 import javolution.util.FastList;

 // check permissions
 hasViewSltPermission = security.hasEntityPermission("CRMSFA_SLT", "_VIEW", userLogin);
 context.put("hasViewSltPermission", hasViewSltPermission);

 partyId = UtilCommon.getParameter(request, "partyId");
 performFind = UtilCommon.getParameter(request, "performFind");
 if (performFind == null || !"Y".equals(performFind)) return;

 shoppingListBuilder() {
     entityName = "ShoppingList";
     where = FastList.newInstance();
     if (UtilValidate.isNotEmpty(partyId)) {
         where.add(new EntityExpr("partyId", EntityOperator.EQUALS, partyId));
     } else {
         where.add(new EntityExpr("partyId", EntityOperator.LIKE, "%"));
     }

     build(page){
         return page;
     }
     return this;
 }
 context.put("shoppingListBuilder", shoppingListBuilder());
