/*
 * Copyright (c) 2006 - 2007 Open Source Strategies, Inc.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the Honest Public License.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * Honest Public License for more details.
 * 
 * You should have received a copy of the Honest Public License
 * along with this program; if not, write to Funambol,
 * 643 Bair Island Road, Suite 305 - Redwood City, CA 94063, USA
 */
import org.ofbiz.base.util.UtilMisc;
import org.opentaps.common.party.ViewPrefWorker;
import com.opensourcestrategies.crmsfa.teams.TeamHelper;

// determine the user's prefered find using findActivePartiesViewPrefTypeId (optional feature)
userLogin = request.getAttribute("userLogin");
calendarPref = ViewPrefWorker.getViewPreferenceString(userLogin, "MY_OR_TEAM_CALENDAR");

// save the value in the context
context.put("MY_OR_TEAM_CALENDAR", calendarPref);

// whether the user can see team calendars
hasTeamCalviewPermission = security.hasPermission("CRMSFA_TEAM_CALVIEW", userLogin);
context.put("hasTeamCalviewPermission", hasTeamCalviewPermission);

// determine the set of parties whom we will be getting events for (default is user login's)
if ("TEAM_VALUES".equals(calendarPref) && hasTeamCalviewPermission) {
    context.put("partyIds", TeamHelper.getTeamMembersForPartyId(userLogin.getString("partyId"), delegator));
} else {
    context.put("partyIds", UtilMisc.toList(userLogin.get("partyId")));
}
