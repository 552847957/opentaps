/*
 * Copyright (c) 2006 - 2007 Open Source Strategies, Inc.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the Honest Public License.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * Honest Public License for more details.
 * 
 * You should have received a copy of the Honest Public License
 * along with this program; if not, write to Funambol,
 * 643 Bair Island Road, Suite 305 - Redwood City, CA 94063, USA
 */
/* Copyright (c) 2005-2006 Open Source Strategies, Inc. */

import org.ofbiz.base.util.UtilMisc;
import org.ofbiz.base.util.UtilValidate;
import org.ofbiz.base.util.UtilProperties;

delegator = request.getAttribute("delegator");

// get parameters
partyId = parameters.get("partyId");
userLoginId = parameters.get("userLoginId");
donePage = parameters.get("DONE_PAGE");
if (UtilValidate.isEmpty(donePage)) {
    donePage = parameters.get("donePage");
}

// find the PartyAndUserLogin entity
partyAndUserLogin = delegator.findByPrimaryKey("PartyAndUserLogin", UtilMisc.toMap("partyId", partyId, "userLoginId", userLoginId) );

// check is password are encrypted (in that case we cannot display them)
useEncryption = "true".equals(UtilProperties.getPropertyValue("security.properties", "password.encrypt"));

context.put("passwordIsEncrypted", useEncryption);
context.put("partyAndUserLogin", partyAndUserLogin);
context.put("partyId", partyId);
context.put("userLoginId", userLoginId);
context.put("donePage", donePage);
