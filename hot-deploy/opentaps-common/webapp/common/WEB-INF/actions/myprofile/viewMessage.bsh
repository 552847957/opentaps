/*
 * Copyright (c) 2006 - 2008 Open Source Strategies, Inc.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the Honest Public License.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * Honest Public License for more details.
 * 
 * You should have received a copy of the Honest Public License
 * along with this program; if not, write to Funambol,
 * 643 Bair Island Road, Suite 305 - Redwood City, CA 94063, USA
 */
/* Copyright (c) 2005-2008 Open Source Strategies, Inc. */

import org.opentaps.common.party.PartyHelper;
import org.opentaps.common.util.UtilCommon;
import javolution.util.FastList;
import javolution.util.FastMap;
import org.ofbiz.entity.condition.EntityExpr;
import org.ofbiz.entity.condition.EntityOperator;
import org.ofbiz.base.util.UtilMisc;
import org.ofbiz.base.util.UtilValidate;
import org.ofbiz.service.ServiceUtil;

boolean isInternalMessageSender = false;

if (userLogin == null) return;

isInternalMessageSender = PartyHelper.isInternalMessageSender(userLogin.getString("partyId"), delegator);
partyIdTo = userLogin.getString("partyId");

communicationEventId = UtilCommon.getParameter(context, "communicationEventId");

message = delegator.findByPrimaryKey("CommunicationEvent", UtilMisc.toMap("communicationEventId", communicationEventId));
if (message != null) {
    context.put("message", message);
}
