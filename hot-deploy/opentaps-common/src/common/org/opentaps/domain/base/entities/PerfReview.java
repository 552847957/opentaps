package org.opentaps.domain.base.entities;

/*
* Copyright (c) 2008 - 2009 Open Source Strategies, Inc.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the Honest Public License.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* Honest Public License for more details.
*
* You should have received a copy of the Honest Public License
* along with this program; if not, write to Funambol,
* 643 Bair Island Road, Suite 305 - Redwood City, CA 94063, USA
*/

// DO NOT EDIT THIS FILE!  THIS IS AUTO GENERATED AND WILL GET WRITTEN OVER PERIODICALLY WHEN THE DATA MODEL CHANGES
// EXTEND THIS CLASS INSTEAD.

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

import javolution.util.FastMap;

import org.opentaps.foundation.entity.Entity;
import org.opentaps.foundation.entity.EntityFieldInterface;
import org.opentaps.foundation.repository.RepositoryException;
import org.opentaps.foundation.repository.RepositoryInterface;
import javax.persistence.*;
import org.hibernate.search.annotations.*;
import java.lang.String;
import java.sql.Timestamp;

/**
 * Auto generated base entity PerfReview.
 */
@javax.persistence.Entity
@Table(name="PERF_REVIEW")
public class PerfReview extends Entity {
static {
java.util.Map<String, String> fields = new java.util.HashMap<String, String>();
        fields.put("employeePartyId", "EMPLOYEE_PARTY_ID");
        fields.put("employeeRoleTypeId", "EMPLOYEE_ROLE_TYPE_ID");
        fields.put("perfReviewId", "PERF_REVIEW_ID");
        fields.put("managerPartyId", "MANAGER_PARTY_ID");
        fields.put("managerRoleTypeId", "MANAGER_ROLE_TYPE_ID");
        fields.put("paymentId", "PAYMENT_ID");
        fields.put("emplPositionId", "EMPL_POSITION_ID");
        fields.put("payHistoryRoleTypeIdFrom", "PAY_HISTORY_ROLE_TYPE_ID_FROM");
        fields.put("payHistoryRoleTypeIdTo", "PAY_HISTORY_ROLE_TYPE_ID_TO");
        fields.put("payHistoryPartyIdFrom", "PAY_HISTORY_PARTY_ID_FROM");
        fields.put("payHistoryPartyIdTo", "PAY_HISTORY_PARTY_ID_TO");
        fields.put("payHistoryFromDate", "PAY_HISTORY_FROM_DATE");
        fields.put("fromDate", "FROM_DATE");
        fields.put("thruDate", "THRU_DATE");
        fields.put("comments", "COMMENTS");
        fields.put("lastUpdatedStamp", "LAST_UPDATED_STAMP");
        fields.put("lastUpdatedTxStamp", "LAST_UPDATED_TX_STAMP");
        fields.put("createdStamp", "CREATED_STAMP");
        fields.put("createdTxStamp", "CREATED_TX_STAMP");
fieldMapColumns.put("PerfReview", fields);
}
  public static enum Fields implements EntityFieldInterface<PerfReview> {
    employeePartyId("employeePartyId"),
    employeeRoleTypeId("employeeRoleTypeId"),
    perfReviewId("perfReviewId"),
    managerPartyId("managerPartyId"),
    managerRoleTypeId("managerRoleTypeId"),
    paymentId("paymentId"),
    emplPositionId("emplPositionId"),
    payHistoryRoleTypeIdFrom("payHistoryRoleTypeIdFrom"),
    payHistoryRoleTypeIdTo("payHistoryRoleTypeIdTo"),
    payHistoryPartyIdFrom("payHistoryPartyIdFrom"),
    payHistoryPartyIdTo("payHistoryPartyIdTo"),
    payHistoryFromDate("payHistoryFromDate"),
    fromDate("fromDate"),
    thruDate("thruDate"),
    comments("comments"),
    lastUpdatedStamp("lastUpdatedStamp"),
    lastUpdatedTxStamp("lastUpdatedTxStamp"),
    createdStamp("createdStamp"),
    createdTxStamp("createdTxStamp");
    private final String fieldName;
    private Fields(String name) { fieldName = name; }
    /** {@inheritDoc} */
    public String getName() { return fieldName; }
    /** {@inheritDoc} */
    public String asc() { return fieldName + " ASC"; }
    /** {@inheritDoc} */
    public String desc() { return fieldName + " DESC"; }
  }

   @EmbeddedId

   @FieldBridge(impl = org.opentaps.domain.base.entities.bridge.PerfReviewPkBridge.class)
     private PerfReviewPk id = new PerfReviewPk();
   
    /**
     * Auto generated Id accessor.
     * @return <code>PerfReviewPk</code>
     */
      public PerfReviewPk getId() {
         return id;
      }
    /**
     * Auto generated Id setter.
     * @param id a <code>PerfReviewPk</code> value to set
    */   
      public void setId(PerfReviewPk id) {
         this.id = id;
      }
   @Column(name="MANAGER_PARTY_ID")
   private String managerPartyId;
   @Column(name="MANAGER_ROLE_TYPE_ID")
   private String managerRoleTypeId;
   @Column(name="PAYMENT_ID")
   private String paymentId;
   @Column(name="EMPL_POSITION_ID")
   private String emplPositionId;
   @Column(name="PAY_HISTORY_ROLE_TYPE_ID_FROM")
   private String payHistoryRoleTypeIdFrom;
   @Column(name="PAY_HISTORY_ROLE_TYPE_ID_TO")
   private String payHistoryRoleTypeIdTo;
   @Column(name="PAY_HISTORY_PARTY_ID_FROM")
   private String payHistoryPartyIdFrom;
   @Column(name="PAY_HISTORY_PARTY_ID_TO")
   private String payHistoryPartyIdTo;
   @Column(name="PAY_HISTORY_FROM_DATE")
   private Timestamp payHistoryFromDate;
   @Column(name="FROM_DATE")
   private Timestamp fromDate;
   @Column(name="THRU_DATE")
   private Timestamp thruDate;
   @Column(name="COMMENTS")
   private String comments;
   @Column(name="LAST_UPDATED_STAMP")
   private Timestamp lastUpdatedStamp;
   @Column(name="LAST_UPDATED_TX_STAMP")
   private Timestamp lastUpdatedTxStamp;
   @Column(name="CREATED_STAMP")
   private Timestamp createdStamp;
   @Column(name="CREATED_TX_STAMP")
   private Timestamp createdTxStamp;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="EMPLOYEE_PARTY_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private Party employeeParty = null;
   private transient PartyRole employeePartyRole = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="MANAGER_PARTY_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private Party managerParty = null;
   private transient PartyRole managerPartyRole = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="PAYMENT_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private Payment payment = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="EMPL_POSITION_ID", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private EmplPosition emplPosition = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="PAY_HISTORY_PARTY_ID_FROM", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private Party payHistoryFromParty = null;
   private transient PartyRole payHistoryFromPartyRole = null;
   @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
   @JoinColumn(name="PAY_HISTORY_PARTY_ID_TO", insertable=false, updatable=false)
   @org.hibernate.annotations.Generated(
      org.hibernate.annotations.GenerationTime.ALWAYS
   )
   
   private Party payHistoryToParty = null;
   private transient PartyRole payHistoryToPartyRole = null;
   private transient List<PerfReviewItem> perfReviewItems = null;

  /**
   * Default constructor.
   */
  public PerfReview() {
      super();
      this.baseEntityName = "PerfReview";
      this.isView = false;
      
      this.primaryKeyNames = new ArrayList<String>();
      this.primaryKeyNames.add("employeePartyId");this.primaryKeyNames.add("employeeRoleTypeId");this.primaryKeyNames.add("perfReviewId");
      this.allFieldsNames = new ArrayList<String>();
      this.allFieldsNames.add("employeePartyId");this.allFieldsNames.add("employeeRoleTypeId");this.allFieldsNames.add("perfReviewId");this.allFieldsNames.add("managerPartyId");this.allFieldsNames.add("managerRoleTypeId");this.allFieldsNames.add("paymentId");this.allFieldsNames.add("emplPositionId");this.allFieldsNames.add("payHistoryRoleTypeIdFrom");this.allFieldsNames.add("payHistoryRoleTypeIdTo");this.allFieldsNames.add("payHistoryPartyIdFrom");this.allFieldsNames.add("payHistoryPartyIdTo");this.allFieldsNames.add("payHistoryFromDate");this.allFieldsNames.add("fromDate");this.allFieldsNames.add("thruDate");this.allFieldsNames.add("comments");this.allFieldsNames.add("lastUpdatedStamp");this.allFieldsNames.add("lastUpdatedTxStamp");this.allFieldsNames.add("createdStamp");this.allFieldsNames.add("createdTxStamp");
      this.nonPrimaryKeyNames = new ArrayList<String>();
      this.nonPrimaryKeyNames.addAll(allFieldsNames);
      this.nonPrimaryKeyNames.removeAll(primaryKeyNames);
  }

  /**
   * Constructor with a repository.
   * @param repository a <code>RepositoryInterface</code> value
   */
  public PerfReview(RepositoryInterface repository) {
      this();
      initRepository(repository);
  }

    /**
     * Auto generated value setter.
     * @param employeePartyId the employeePartyId to set
     */
    public void setEmployeePartyId(String employeePartyId) {
        id.setEmployeePartyId(employeePartyId);
    }
    /**
     * Auto generated value setter.
     * @param employeeRoleTypeId the employeeRoleTypeId to set
     */
    public void setEmployeeRoleTypeId(String employeeRoleTypeId) {
        id.setEmployeeRoleTypeId(employeeRoleTypeId);
    }
    /**
     * Auto generated value setter.
     * @param perfReviewId the perfReviewId to set
     */
    public void setPerfReviewId(String perfReviewId) {
        id.setPerfReviewId(perfReviewId);
    }
    /**
     * Auto generated value setter.
     * @param managerPartyId the managerPartyId to set
     */
    public void setManagerPartyId(String managerPartyId) {
        this.managerPartyId = managerPartyId;
    }
    /**
     * Auto generated value setter.
     * @param managerRoleTypeId the managerRoleTypeId to set
     */
    public void setManagerRoleTypeId(String managerRoleTypeId) {
        this.managerRoleTypeId = managerRoleTypeId;
    }
    /**
     * Auto generated value setter.
     * @param paymentId the paymentId to set
     */
    public void setPaymentId(String paymentId) {
        this.paymentId = paymentId;
    }
    /**
     * Auto generated value setter.
     * @param emplPositionId the emplPositionId to set
     */
    public void setEmplPositionId(String emplPositionId) {
        this.emplPositionId = emplPositionId;
    }
    /**
     * Auto generated value setter.
     * @param payHistoryRoleTypeIdFrom the payHistoryRoleTypeIdFrom to set
     */
    public void setPayHistoryRoleTypeIdFrom(String payHistoryRoleTypeIdFrom) {
        this.payHistoryRoleTypeIdFrom = payHistoryRoleTypeIdFrom;
    }
    /**
     * Auto generated value setter.
     * @param payHistoryRoleTypeIdTo the payHistoryRoleTypeIdTo to set
     */
    public void setPayHistoryRoleTypeIdTo(String payHistoryRoleTypeIdTo) {
        this.payHistoryRoleTypeIdTo = payHistoryRoleTypeIdTo;
    }
    /**
     * Auto generated value setter.
     * @param payHistoryPartyIdFrom the payHistoryPartyIdFrom to set
     */
    public void setPayHistoryPartyIdFrom(String payHistoryPartyIdFrom) {
        this.payHistoryPartyIdFrom = payHistoryPartyIdFrom;
    }
    /**
     * Auto generated value setter.
     * @param payHistoryPartyIdTo the payHistoryPartyIdTo to set
     */
    public void setPayHistoryPartyIdTo(String payHistoryPartyIdTo) {
        this.payHistoryPartyIdTo = payHistoryPartyIdTo;
    }
    /**
     * Auto generated value setter.
     * @param payHistoryFromDate the payHistoryFromDate to set
     */
    public void setPayHistoryFromDate(Timestamp payHistoryFromDate) {
        this.payHistoryFromDate = payHistoryFromDate;
    }
    /**
     * Auto generated value setter.
     * @param fromDate the fromDate to set
     */
    public void setFromDate(Timestamp fromDate) {
        this.fromDate = fromDate;
    }
    /**
     * Auto generated value setter.
     * @param thruDate the thruDate to set
     */
    public void setThruDate(Timestamp thruDate) {
        this.thruDate = thruDate;
    }
    /**
     * Auto generated value setter.
     * @param comments the comments to set
     */
    public void setComments(String comments) {
        this.comments = comments;
    }
    /**
     * Auto generated value setter.
     * @param lastUpdatedStamp the lastUpdatedStamp to set
     */
    public void setLastUpdatedStamp(Timestamp lastUpdatedStamp) {
        this.lastUpdatedStamp = lastUpdatedStamp;
    }
    /**
     * Auto generated value setter.
     * @param lastUpdatedTxStamp the lastUpdatedTxStamp to set
     */
    public void setLastUpdatedTxStamp(Timestamp lastUpdatedTxStamp) {
        this.lastUpdatedTxStamp = lastUpdatedTxStamp;
    }
    /**
     * Auto generated value setter.
     * @param createdStamp the createdStamp to set
     */
    public void setCreatedStamp(Timestamp createdStamp) {
        this.createdStamp = createdStamp;
    }
    /**
     * Auto generated value setter.
     * @param createdTxStamp the createdTxStamp to set
     */
    public void setCreatedTxStamp(Timestamp createdTxStamp) {
        this.createdTxStamp = createdTxStamp;
    }

    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getEmployeePartyId() {
        return this.id.getEmployeePartyId();
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getEmployeeRoleTypeId() {
        return this.id.getEmployeeRoleTypeId();
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getPerfReviewId() {
        return this.id.getPerfReviewId();
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getManagerPartyId() {
        return this.managerPartyId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getManagerRoleTypeId() {
        return this.managerRoleTypeId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getPaymentId() {
        return this.paymentId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getEmplPositionId() {
        return this.emplPositionId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getPayHistoryRoleTypeIdFrom() {
        return this.payHistoryRoleTypeIdFrom;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getPayHistoryRoleTypeIdTo() {
        return this.payHistoryRoleTypeIdTo;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getPayHistoryPartyIdFrom() {
        return this.payHistoryPartyIdFrom;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getPayHistoryPartyIdTo() {
        return this.payHistoryPartyIdTo;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getPayHistoryFromDate() {
        return this.payHistoryFromDate;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getFromDate() {
        return this.fromDate;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getThruDate() {
        return this.thruDate;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getComments() {
        return this.comments;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getLastUpdatedStamp() {
        return this.lastUpdatedStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getLastUpdatedTxStamp() {
        return this.lastUpdatedTxStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getCreatedStamp() {
        return this.createdStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getCreatedTxStamp() {
        return this.createdTxStamp;
    }

    /**
     * Auto generated method that gets the related <code>Party</code> by the relation named <code>EmployeeParty</code>.
     * @return the <code>Party</code>
     * @throws RepositoryException if an error occurs
     */
    public Party getEmployeeParty() throws RepositoryException {
        if (this.employeeParty == null) {
            this.employeeParty = getRelatedOne(Party.class, "EmployeeParty");
        }
        return this.employeeParty;
    }
    /**
     * Auto generated method that gets the related <code>PartyRole</code> by the relation named <code>EmployeePartyRole</code>.
     * @return the <code>PartyRole</code>
     * @throws RepositoryException if an error occurs
     */
    public PartyRole getEmployeePartyRole() throws RepositoryException {
        if (this.employeePartyRole == null) {
            this.employeePartyRole = getRelatedOne(PartyRole.class, "EmployeePartyRole");
        }
        return this.employeePartyRole;
    }
    /**
     * Auto generated method that gets the related <code>Party</code> by the relation named <code>ManagerParty</code>.
     * @return the <code>Party</code>
     * @throws RepositoryException if an error occurs
     */
    public Party getManagerParty() throws RepositoryException {
        if (this.managerParty == null) {
            this.managerParty = getRelatedOne(Party.class, "ManagerParty");
        }
        return this.managerParty;
    }
    /**
     * Auto generated method that gets the related <code>PartyRole</code> by the relation named <code>ManagerPartyRole</code>.
     * @return the <code>PartyRole</code>
     * @throws RepositoryException if an error occurs
     */
    public PartyRole getManagerPartyRole() throws RepositoryException {
        if (this.managerPartyRole == null) {
            this.managerPartyRole = getRelatedOne(PartyRole.class, "ManagerPartyRole");
        }
        return this.managerPartyRole;
    }
    /**
     * Auto generated method that gets the related <code>Payment</code> by the relation named <code>Payment</code>.
     * @return the <code>Payment</code>
     * @throws RepositoryException if an error occurs
     */
    public Payment getPayment() throws RepositoryException {
        if (this.payment == null) {
            this.payment = getRelatedOne(Payment.class, "Payment");
        }
        return this.payment;
    }
    /**
     * Auto generated method that gets the related <code>EmplPosition</code> by the relation named <code>EmplPosition</code>.
     * @return the <code>EmplPosition</code>
     * @throws RepositoryException if an error occurs
     */
    public EmplPosition getEmplPosition() throws RepositoryException {
        if (this.emplPosition == null) {
            this.emplPosition = getRelatedOne(EmplPosition.class, "EmplPosition");
        }
        return this.emplPosition;
    }
    /**
     * Auto generated method that gets the related <code>Party</code> by the relation named <code>PayHistoryFromParty</code>.
     * @return the <code>Party</code>
     * @throws RepositoryException if an error occurs
     */
    public Party getPayHistoryFromParty() throws RepositoryException {
        if (this.payHistoryFromParty == null) {
            this.payHistoryFromParty = getRelatedOne(Party.class, "PayHistoryFromParty");
        }
        return this.payHistoryFromParty;
    }
    /**
     * Auto generated method that gets the related <code>PartyRole</code> by the relation named <code>PayHistoryFromPartyRole</code>.
     * @return the <code>PartyRole</code>
     * @throws RepositoryException if an error occurs
     */
    public PartyRole getPayHistoryFromPartyRole() throws RepositoryException {
        if (this.payHistoryFromPartyRole == null) {
            this.payHistoryFromPartyRole = getRelatedOne(PartyRole.class, "PayHistoryFromPartyRole");
        }
        return this.payHistoryFromPartyRole;
    }
    /**
     * Auto generated method that gets the related <code>Party</code> by the relation named <code>PayHistoryToParty</code>.
     * @return the <code>Party</code>
     * @throws RepositoryException if an error occurs
     */
    public Party getPayHistoryToParty() throws RepositoryException {
        if (this.payHistoryToParty == null) {
            this.payHistoryToParty = getRelatedOne(Party.class, "PayHistoryToParty");
        }
        return this.payHistoryToParty;
    }
    /**
     * Auto generated method that gets the related <code>PartyRole</code> by the relation named <code>PayHistoryToPartyRole</code>.
     * @return the <code>PartyRole</code>
     * @throws RepositoryException if an error occurs
     */
    public PartyRole getPayHistoryToPartyRole() throws RepositoryException {
        if (this.payHistoryToPartyRole == null) {
            this.payHistoryToPartyRole = getRelatedOne(PartyRole.class, "PayHistoryToPartyRole");
        }
        return this.payHistoryToPartyRole;
    }
    /**
     * Auto generated method that gets the related <code>PerfReviewItem</code> by the relation named <code>PerfReviewItem</code>.
     * @return the list of <code>PerfReviewItem</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PerfReviewItem> getPerfReviewItems() throws RepositoryException {
        if (this.perfReviewItems == null) {
            this.perfReviewItems = getRelated(PerfReviewItem.class, "PerfReviewItem");
        }
        return this.perfReviewItems;
    }

    /**
     * Auto generated value setter.
     * @param employeeParty the employeeParty to set
    */
    public void setEmployeeParty(Party employeeParty) {
        this.employeeParty = employeeParty;
    }
    /**
     * Auto generated value setter.
     * @param employeePartyRole the employeePartyRole to set
    */
    public void setEmployeePartyRole(PartyRole employeePartyRole) {
        this.employeePartyRole = employeePartyRole;
    }
    /**
     * Auto generated value setter.
     * @param managerParty the managerParty to set
    */
    public void setManagerParty(Party managerParty) {
        this.managerParty = managerParty;
    }
    /**
     * Auto generated value setter.
     * @param managerPartyRole the managerPartyRole to set
    */
    public void setManagerPartyRole(PartyRole managerPartyRole) {
        this.managerPartyRole = managerPartyRole;
    }
    /**
     * Auto generated value setter.
     * @param payment the payment to set
    */
    public void setPayment(Payment payment) {
        this.payment = payment;
    }
    /**
     * Auto generated value setter.
     * @param emplPosition the emplPosition to set
    */
    public void setEmplPosition(EmplPosition emplPosition) {
        this.emplPosition = emplPosition;
    }
    /**
     * Auto generated value setter.
     * @param payHistoryFromParty the payHistoryFromParty to set
    */
    public void setPayHistoryFromParty(Party payHistoryFromParty) {
        this.payHistoryFromParty = payHistoryFromParty;
    }
    /**
     * Auto generated value setter.
     * @param payHistoryFromPartyRole the payHistoryFromPartyRole to set
    */
    public void setPayHistoryFromPartyRole(PartyRole payHistoryFromPartyRole) {
        this.payHistoryFromPartyRole = payHistoryFromPartyRole;
    }
    /**
     * Auto generated value setter.
     * @param payHistoryToParty the payHistoryToParty to set
    */
    public void setPayHistoryToParty(Party payHistoryToParty) {
        this.payHistoryToParty = payHistoryToParty;
    }
    /**
     * Auto generated value setter.
     * @param payHistoryToPartyRole the payHistoryToPartyRole to set
    */
    public void setPayHistoryToPartyRole(PartyRole payHistoryToPartyRole) {
        this.payHistoryToPartyRole = payHistoryToPartyRole;
    }
    /**
     * Auto generated value setter.
     * @param perfReviewItems the perfReviewItems to set
    */
    public void setPerfReviewItems(List<PerfReviewItem> perfReviewItems) {
        this.perfReviewItems = perfReviewItems;
    }


    /** {@inheritDoc} */
    @Override
    public void fromMap(Map<String, Object> mapValue) {
        preInit();
        setEmployeePartyId((String) mapValue.get("employeePartyId"));
        setEmployeeRoleTypeId((String) mapValue.get("employeeRoleTypeId"));
        setPerfReviewId((String) mapValue.get("perfReviewId"));
        setManagerPartyId((String) mapValue.get("managerPartyId"));
        setManagerRoleTypeId((String) mapValue.get("managerRoleTypeId"));
        setPaymentId((String) mapValue.get("paymentId"));
        setEmplPositionId((String) mapValue.get("emplPositionId"));
        setPayHistoryRoleTypeIdFrom((String) mapValue.get("payHistoryRoleTypeIdFrom"));
        setPayHistoryRoleTypeIdTo((String) mapValue.get("payHistoryRoleTypeIdTo"));
        setPayHistoryPartyIdFrom((String) mapValue.get("payHistoryPartyIdFrom"));
        setPayHistoryPartyIdTo((String) mapValue.get("payHistoryPartyIdTo"));
        setPayHistoryFromDate((Timestamp) mapValue.get("payHistoryFromDate"));
        setFromDate((Timestamp) mapValue.get("fromDate"));
        setThruDate((Timestamp) mapValue.get("thruDate"));
        setComments((String) mapValue.get("comments"));
        setLastUpdatedStamp((Timestamp) mapValue.get("lastUpdatedStamp"));
        setLastUpdatedTxStamp((Timestamp) mapValue.get("lastUpdatedTxStamp"));
        setCreatedStamp((Timestamp) mapValue.get("createdStamp"));
        setCreatedTxStamp((Timestamp) mapValue.get("createdTxStamp"));
        postInit();
    }

    /** {@inheritDoc} */
    @Override
    public Map<String, Object> toMap() {
        Map<String, Object> mapValue = new FastMap<String, Object>();
        mapValue.put("employeePartyId", getEmployeePartyId());
        mapValue.put("employeeRoleTypeId", getEmployeeRoleTypeId());
        mapValue.put("perfReviewId", getPerfReviewId());
        mapValue.put("managerPartyId", getManagerPartyId());
        mapValue.put("managerRoleTypeId", getManagerRoleTypeId());
        mapValue.put("paymentId", getPaymentId());
        mapValue.put("emplPositionId", getEmplPositionId());
        mapValue.put("payHistoryRoleTypeIdFrom", getPayHistoryRoleTypeIdFrom());
        mapValue.put("payHistoryRoleTypeIdTo", getPayHistoryRoleTypeIdTo());
        mapValue.put("payHistoryPartyIdFrom", getPayHistoryPartyIdFrom());
        mapValue.put("payHistoryPartyIdTo", getPayHistoryPartyIdTo());
        mapValue.put("payHistoryFromDate", getPayHistoryFromDate());
        mapValue.put("fromDate", getFromDate());
        mapValue.put("thruDate", getThruDate());
        mapValue.put("comments", getComments());
        mapValue.put("lastUpdatedStamp", getLastUpdatedStamp());
        mapValue.put("lastUpdatedTxStamp", getLastUpdatedTxStamp());
        mapValue.put("createdStamp", getCreatedStamp());
        mapValue.put("createdTxStamp", getCreatedTxStamp());
        return mapValue;
    }


}
