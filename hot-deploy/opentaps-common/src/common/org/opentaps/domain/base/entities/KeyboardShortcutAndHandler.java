package org.opentaps.domain.base.entities;

/*
* Copyright (c) 2008 - 2009 Open Source Strategies, Inc.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the Honest Public License.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* Honest Public License for more details.
*
* You should have received a copy of the Honest Public License
* along with this program; if not, write to Funambol,
* 643 Bair Island Road, Suite 305 - Redwood City, CA 94063, USA
*/

// DO NOT EDIT THIS FILE!  THIS IS AUTO GENERATED AND WILL GET WRITTEN OVER PERIODICALLY WHEN THE DATA MODEL CHANGES
// EXTEND THIS CLASS INSTEAD.

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

import javolution.util.FastMap;

import org.opentaps.foundation.entity.Entity;
import org.opentaps.foundation.entity.EntityFieldInterface;
import org.opentaps.foundation.repository.RepositoryException;
import org.opentaps.foundation.repository.RepositoryInterface;
import javax.persistence.*;
import org.hibernate.search.annotations.*;
import java.lang.Long;
import java.lang.String;

/**
 * Auto generated base entity KeyboardShortcutAndHandler.
 */
@javax.persistence.Entity
@NamedNativeQuery(name="selectKeyboardShortcutAndHandlers", query="SELECT KB.SHORTCUT_ID AS \"shortcutId\",KB.USER_LOGIN_ID AS \"userLoginId\",KB.APPLICATION_NAME AS \"applicationName\",KB.SCREEN_NAME AS \"screenName\",KB.SHORTCUT AS \"shortcut\",KB.ACTION_TYPE_ID AS \"actionTypeId\",KB.ACTION_TARGET AS \"actionTarget\",KB.DESCRIPTION AS \"description\",KB.SEQUENCE_NUM AS \"sequenceNum\",KBH.HANDLER AS \"handler\" FROM KEYBOARD_SHORTCUT KB INNER JOIN KEYBOARD_SHORTCUT_HANDLER KBH ON KB.ACTION_TYPE_ID = KBH.ACTION_TYPE_ID", resultSetMapping="KeyboardShortcutAndHandlerMapping")
@SqlResultSetMapping(name="KeyboardShortcutAndHandlerMapping", entities={
@EntityResult(entityClass=KeyboardShortcutAndHandler.class, fields = {
@FieldResult(name="shortcutId", column="shortcutId")
,@FieldResult(name="userLoginId", column="userLoginId")
,@FieldResult(name="applicationName", column="applicationName")
,@FieldResult(name="screenName", column="screenName")
,@FieldResult(name="shortcut", column="shortcut")
,@FieldResult(name="actionTypeId", column="actionTypeId")
,@FieldResult(name="actionTarget", column="actionTarget")
,@FieldResult(name="description", column="description")
,@FieldResult(name="sequenceNum", column="sequenceNum")
,@FieldResult(name="handler", column="handler")
})})
@org.hibernate.annotations.Entity(mutable = false)
@org.hibernate.annotations.AccessType("field")
public class KeyboardShortcutAndHandler extends Entity {
static {
java.util.Map<String, String> fields = new java.util.HashMap<String, String>();
        fields.put("shortcutId", "KB.SHORTCUT_ID");
        fields.put("userLoginId", "KB.USER_LOGIN_ID");
        fields.put("applicationName", "KB.APPLICATION_NAME");
        fields.put("screenName", "KB.SCREEN_NAME");
        fields.put("shortcut", "KB.SHORTCUT");
        fields.put("actionTypeId", "KB.ACTION_TYPE_ID");
        fields.put("actionTarget", "KB.ACTION_TARGET");
        fields.put("description", "KB.DESCRIPTION");
        fields.put("sequenceNum", "KB.SEQUENCE_NUM");
        fields.put("handler", "KBH.HANDLER");
fieldMapColumns.put("KeyboardShortcutAndHandler", fields);
}
  public static enum Fields implements EntityFieldInterface<KeyboardShortcutAndHandler> {
    shortcutId("shortcutId"),
    userLoginId("userLoginId"),
    applicationName("applicationName"),
    screenName("screenName"),
    shortcut("shortcut"),
    actionTypeId("actionTypeId"),
    actionTarget("actionTarget"),
    description("description"),
    sequenceNum("sequenceNum"),
    handler("handler");
    private final String fieldName;
    private Fields(String name) { fieldName = name; }
    /** {@inheritDoc} */
    public String getName() { return fieldName; }
    /** {@inheritDoc} */
    public String asc() { return fieldName + " ASC"; }
    /** {@inheritDoc} */
    public String desc() { return fieldName + " DESC"; }
  }

    @Id
   private String shortcutId;
    
   private String userLoginId;
    
   private String applicationName;
    
   private String screenName;
    
   private String shortcut;
    
   private String actionTypeId;
    
   private String actionTarget;
    
   private String description;
    
   private Long sequenceNum;
    
   private String handler;

  /**
   * Default constructor.
   */
  public KeyboardShortcutAndHandler() {
      super();
      this.baseEntityName = "KeyboardShortcutAndHandler";
      this.isView = true;
      
      this.primaryKeyNames = new ArrayList<String>();
      this.primaryKeyNames.add("shortcutId");
      this.allFieldsNames = new ArrayList<String>();
      this.allFieldsNames.add("shortcutId");this.allFieldsNames.add("userLoginId");this.allFieldsNames.add("applicationName");this.allFieldsNames.add("screenName");this.allFieldsNames.add("shortcut");this.allFieldsNames.add("actionTypeId");this.allFieldsNames.add("actionTarget");this.allFieldsNames.add("description");this.allFieldsNames.add("sequenceNum");this.allFieldsNames.add("handler");
      this.nonPrimaryKeyNames = new ArrayList<String>();
      this.nonPrimaryKeyNames.addAll(allFieldsNames);
      this.nonPrimaryKeyNames.removeAll(primaryKeyNames);
  }

  /**
   * Constructor with a repository.
   * @param repository a <code>RepositoryInterface</code> value
   */
  public KeyboardShortcutAndHandler(RepositoryInterface repository) {
      this();
      initRepository(repository);
  }

    /**
     * This is a view-entity, so the setter methods will be private to this class and for use in its fromMap constructor only
     */
    /**
     * Auto generated value setter.
     * @param shortcutId the shortcutId to set
     */
    private void setShortcutId(String shortcutId) {
        this.shortcutId = shortcutId;
    }
    /**
     * Auto generated value setter.
     * @param userLoginId the userLoginId to set
     */
    private void setUserLoginId(String userLoginId) {
        this.userLoginId = userLoginId;
    }
    /**
     * Auto generated value setter.
     * @param applicationName the applicationName to set
     */
    private void setApplicationName(String applicationName) {
        this.applicationName = applicationName;
    }
    /**
     * Auto generated value setter.
     * @param screenName the screenName to set
     */
    private void setScreenName(String screenName) {
        this.screenName = screenName;
    }
    /**
     * Auto generated value setter.
     * @param shortcut the shortcut to set
     */
    private void setShortcut(String shortcut) {
        this.shortcut = shortcut;
    }
    /**
     * Auto generated value setter.
     * @param actionTypeId the actionTypeId to set
     */
    private void setActionTypeId(String actionTypeId) {
        this.actionTypeId = actionTypeId;
    }
    /**
     * Auto generated value setter.
     * @param actionTarget the actionTarget to set
     */
    private void setActionTarget(String actionTarget) {
        this.actionTarget = actionTarget;
    }
    /**
     * Auto generated value setter.
     * @param description the description to set
     */
    private void setDescription(String description) {
        this.description = description;
    }
    /**
     * Auto generated value setter.
     * @param sequenceNum the sequenceNum to set
     */
    private void setSequenceNum(Long sequenceNum) {
        this.sequenceNum = sequenceNum;
    }
    /**
     * Auto generated value setter.
     * @param handler the handler to set
     */
    private void setHandler(String handler) {
        this.handler = handler;
    }

    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getShortcutId() {
        return this.shortcutId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getUserLoginId() {
        return this.userLoginId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getApplicationName() {
        return this.applicationName;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getScreenName() {
        return this.screenName;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getShortcut() {
        return this.shortcut;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getActionTypeId() {
        return this.actionTypeId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getActionTarget() {
        return this.actionTarget;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getDescription() {
        return this.description;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Long</code>
     */
    public Long getSequenceNum() {
        return this.sequenceNum;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getHandler() {
        return this.handler;
    }




    /** {@inheritDoc} */
    @Override
    public void fromMap(Map<String, Object> mapValue) {
        preInit();
        setShortcutId((String) mapValue.get("shortcutId"));
        setUserLoginId((String) mapValue.get("userLoginId"));
        setApplicationName((String) mapValue.get("applicationName"));
        setScreenName((String) mapValue.get("screenName"));
        setShortcut((String) mapValue.get("shortcut"));
        setActionTypeId((String) mapValue.get("actionTypeId"));
        setActionTarget((String) mapValue.get("actionTarget"));
        setDescription((String) mapValue.get("description"));
        setSequenceNum((Long) mapValue.get("sequenceNum"));
        setHandler((String) mapValue.get("handler"));
        postInit();
    }

    /** {@inheritDoc} */
    @Override
    public Map<String, Object> toMap() {
        Map<String, Object> mapValue = new FastMap<String, Object>();
        mapValue.put("shortcutId", getShortcutId());
        mapValue.put("userLoginId", getUserLoginId());
        mapValue.put("applicationName", getApplicationName());
        mapValue.put("screenName", getScreenName());
        mapValue.put("shortcut", getShortcut());
        mapValue.put("actionTypeId", getActionTypeId());
        mapValue.put("actionTarget", getActionTarget());
        mapValue.put("description", getDescription());
        mapValue.put("sequenceNum", getSequenceNum());
        mapValue.put("handler", getHandler());
        return mapValue;
    }


}
