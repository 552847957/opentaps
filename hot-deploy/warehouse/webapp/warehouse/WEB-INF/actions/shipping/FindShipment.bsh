/*
 * Copyright (c) 2006 - 2007 Open Source Strategies, Inc.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the Honest Public License.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * Honest Public License for more details.
 * 
 * You should have received a copy of the Honest Public License
 * along with this program; if not, write to Funambol,
 * 643 Bair Island Road, Suite 305 - Redwood City, CA 94063, USA
 */

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* This file has been modified by Open Source Strategies, Inc. */


import java.util.*;
import java.sql.Timestamp;
import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.entity.util.*;
import org.ofbiz.entity.condition.*;
import org.ofbiz.entity.transaction.*;

// AH: This file needs to be rewritten to better conform to OpenTaps conventions
delegator = request.getAttribute("delegator");

lookupFlag = request.getParameter("lookupFlag");
shipmentId = parameters.get("shipmentId");
shipmentTypeId = request.getParameter("shipmentTypeId");
partyIdFrom = parameters.get("partyIdFrom");
partyIdTo = parameters.get("partyIdTo");
statusId = request.getParameter("statusId");
lotId = request.getParameter("lotId");
formShipmentTypeId = request.getParameter("formShipmentTypeId");

module = "FindShipment.bsh";

// set the page parameters
viewIndex = 1;
try {
    viewIndex = Integer.valueOf((String) request.getParameter("VIEW_INDEX")).intValue();
} catch (Exception e) {
    viewIndex = 1;
}
context.put("viewIndex", viewIndex);

viewSize = 20;
try {
    viewSize = Integer.valueOf((String) request.getParameter("VIEW_SIZE")).intValue();
} catch (Exception e) {
    viewSize = 20;
}
context.put("viewSize", viewSize);

findShipmentExprs = new LinkedList();
paramListBuffer = new StringBuffer();
if (UtilValidate.isNotEmpty(shipmentId)) {
    paramListBuffer.append("&shipmentId=");
    paramListBuffer.append(shipmentId);
    findShipmentExprs.add(new EntityExpr("shipmentId", EntityOperator.EQUALS, shipmentId));
}
if (UtilValidate.isNotEmpty(shipmentTypeId)) {
    paramListBuffer.append("&shipmentTypeId=");
    paramListBuffer.append(shipmentTypeId);
    findShipmentExprs.add(new EntityExpr("shipmentTypeId", EntityOperator.EQUALS, shipmentTypeId));

    currentShipmentType = delegator.findByPrimaryKeyCache("ShipmentType", UtilMisc.toMap("shipmentTypeId", shipmentTypeId));
    context.put("currentShipmentType", currentShipmentType);
}
if (UtilValidate.isNotEmpty(partyIdFrom)) {
    paramListBuffer.append("&partyIdFrom=");
    paramListBuffer.append(partyIdFrom);
    findShipmentExprs.add(new EntityExpr("partyIdFrom", EntityOperator.EQUALS, partyIdFrom));

    currentPartyIdFrom = delegator.findByPrimaryKeyCache("Party", UtilMisc.toMap("partyId", partyIdFrom));
    context.put("currentPartyIdFrom", currentPartyIdFrom);
}
if (UtilValidate.isNotEmpty(partyIdTo)) {
    paramListBuffer.append("&partyIdTo=");
    paramListBuffer.append(partyIdTo);
    findShipmentExprs.add(new EntityExpr("partyIdTo", EntityOperator.EQUALS, partyIdTo));

    currentPartyIdTo = delegator.findByPrimaryKeyCache("Party", UtilMisc.toMap("partyId", partyIdTo));
    context.put("currentPartyIdTo", currentPartyIdTo);
}
if (UtilValidate.isNotEmpty(lotId)) {
    paramListBuffer.append("&lotId=");
    paramListBuffer.append(lotId);
    findShipmentExprs.add(new EntityExpr("lotId", EntityOperator.LIKE, lotId + "%"));

    currentLot = delegator.findByPrimaryKeyCache("Lot", UtilMisc.toMap("lotId", lotId));
    context.put("currentLot", currentLot);
}
if (UtilValidate.isNotEmpty(statusId)) {
    paramListBuffer.append("&statusId=");
    paramListBuffer.append(statusId);
    findShipmentExprs.add(new EntityExpr("statusId", EntityOperator.EQUALS, statusId));

    currentStatus = delegator.findByPrimaryKeyCache("StatusItem", UtilMisc.toMap("statusId", statusId));
    context.put("currentStatus", currentStatus);
}
if (UtilValidate.isNotEmpty(formShipmentTypeId)) {
    paramListBuffer.append("&formShipmentTypeId=");
    paramListBuffer.append(formShipmentTypeId);
}

// this restricts the shipment lookup to those coming into or going out of the current facility
if ("INCOMING_SHIPMENT".equals(formShipmentTypeId)) {
    findShipmentExprs.add(new EntityExpr("destinationFacilityId", EntityOperator.EQUALS, parameters.get("facilityId")));
} else {
    findShipmentExprs.add(new EntityExpr("originFacilityId", EntityOperator.EQUALS, parameters.get("facilityId")));
}


if ("Y".equals(lookupFlag)) {
    context.put("paramList", paramListBuffer.toString());

    if (findShipmentExprs.size() > 0) {
        EntityFindOptions findOpts = new EntityFindOptions(true, EntityFindOptions.TYPE_SCROLL_INSENSITIVE, EntityFindOptions.CONCUR_READ_ONLY, true);
        mainCond = new EntityConditionList(findShipmentExprs, EntityOperator.AND);
        List orderBy = UtilMisc.toList("-estimatedShipDate");
        List fieldsToSelect = Arrays.asList(new String[] {"shipmentId", "shipmentTypeId", "statusId", "partyIdFrom", "partyIdTo", "destinationContactMechId", "estimatedShipDate"});

        if ("INCOMING_SHIPMENT".equals(formShipmentTypeId)) {
            searchEntity = "ShipmentAndReceiptAndInventory";
        } else if (UtilValidate.isEmpty(lotId)) {
            searchEntity = "Shipment";
        } else {
            searchEntity = "ShipmentAndItemIssuanceAndInventory";
        }

        boolean beganTransaction = false;
        try {
            beganTransaction = TransactionUtil.begin();

            // using list iterator
            EntityListIterator orli = delegator.findListIteratorByCondition(searchEntity, mainCond, null, fieldsToSelect, orderBy, findOpts);

            // get the indexes for the partial list
            lowIndex = (((viewIndex - 1) * viewSize) + 1);
            highIndex = viewIndex * viewSize;

            // attempt to get the full size
            orli.last();
            shipmentListSize = orli.currentIndex();
            if (highIndex > shipmentListSize) {
                highIndex = shipmentListSize;
            }

            // get the partial list for this page
            orli.beforeFirst();
            if (shipmentListSize > 0) {
                shipmentList = orli.getPartialList(lowIndex, viewSize);
            } else {
                shipmentList = new ArrayList();
            }

            // close the list iterator
            orli.close();
        } catch (GenericEntityException e) {
            String errMsg = "Failure in operation, rolling back transaction";
            Debug.logError(e, errMsg, module);
            try {
                // only rollback the transaction if we started one...
                TransactionUtil.rollback(beganTransaction, errMsg, e);
            } catch (GenericEntityException e2) {
                Debug.logError(e2, "Could not rollback transaction: " + e2.toString(), module);
            }
            // after rolling back, rethrow the exception
            throw e;
        } finally {
            // only commit the transaction if we started one... this will throw an exception if it fails
            TransactionUtil.commit(beganTransaction);
        }
    } else {
        shipmentList = new ArrayList();
        shipmentListSize = 0;
        highIndex = 0;
        lowIndex = 0;
    }

    context.put("shipmentList", shipmentList);
    context.put("listSize", shipmentListSize);
    context.put("highIndex", highIndex);
    context.put("lowIndex", lowIndex);
}

// =============== Prepare the Option Data for the Find Form =================

if ("INCOMING_SHIPMENT".equals(formShipmentTypeId)) {
    shipmentTypes = delegator.findByAnd("ShipmentType", UtilMisc.toMap("parentTypeId", "INCOMING_SHIPMENT"), UtilMisc.toList("description"));
} else {
    shipmentTypes = delegator.findByAnd("ShipmentType", UtilMisc.toMap("parentTypeId", "OUTGOING_SHIPMENT"), UtilMisc.toList("description"));
}
context.put("shipmentTypes", shipmentTypes);

facilities = delegator.findAll("Facility", UtilMisc.toList("facilityName"));
context.put("facilities", facilities);

// since purchase and sales shipments have different status codes, we'll need to make two separate lists
if ("INCOMING_SHIPMENT".equals(formShipmentTypeId)) {
    context.put("shipmentStatusList", delegator.findByAnd("StatusItem", UtilMisc.toMap("statusTypeId", "PURCH_SHIP_STATUS"), UtilMisc.toList("sequenceId")));
} else {
    context.put("shipmentStatusList", delegator.findByAnd("StatusItem", UtilMisc.toMap("statusTypeId", "SHIPMENT_STATUS"), UtilMisc.toList("sequenceId")));
}

